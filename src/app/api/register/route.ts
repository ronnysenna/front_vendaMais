import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { v4 as uuidv4 } from "uuid";
import crypto from "crypto";

export async function POST(request: NextRequest) {
  console.log("‚≠ê Rota de registro personalizada acessada");
  try {
    const { name, email, password, confirmPassword } = await request.json();
    console.log("üìù Dados recebidos:", {
      name,
      email,
      passwordLength: password?.length,
    });

    // Valida√ß√µes b√°sicas
    if (!name || !email || !password) {
      console.log("‚ùå Dados inv√°lidos - campos obrigat√≥rios faltando");
      return NextResponse.json(
        { error: "Nome, email e senha s√£o obrigat√≥rios" },
        { status: 400 },
      );
    }

    if (password !== confirmPassword) {
      console.log("‚ùå Senhas n√£o coincidem");
      return NextResponse.json(
        { error: "As senhas n√£o coincidem" },
        { status: 400 },
      );
    }

    // Verifica se o usu√°rio j√° existe
    console.log("üîç Verificando se email j√° existe:", email);
    const existingUser = await prisma.user.findUnique({
      where: { email },
    });

    if (existingUser) {
      console.log("‚ùå Email j√° est√° em uso:", email);
      return NextResponse.json(
        { error: "Este e-mail j√° est√° em uso" },
        { status: 409 },
      );
    }

    // Gerar um ID √∫nico para o usu√°rio
    const userId = uuidv4();
    const now = new Date();

    // Hash da senha para armazenamento seguro
    const passwordHash = crypto
      .createHash("sha256")
      .update(password)
      .digest("hex");

    console.log("üîê Criando novo usu√°rio com ID:", userId);

    try {
      // Criar o usu√°rio diretamente
      const user = await prisma.user.create({
        data: {
          id: userId,
          name,
          email,
          emailVerified: false,
          createdAt: now,
          updatedAt: now,
        },
      });

      console.log("‚úÖ Usu√°rio criado:", user.id);

      // Criar a conta associada
      console.log("üîë Criando conta para o usu√°rio");
      const account = await prisma.account.create({
        data: {
          id: uuidv4(),
          userId: user.id,
          providerId: "credentials",
          accountId: email,
          password: passwordHash,
          createdAt: now,
          updatedAt: now,
        },
      });

      console.log("‚úÖ Conta criada:", account.id);

      return NextResponse.json(
        {
          message: "Usu√°rio cadastrado com sucesso",
          userId: user.id,
        },
        { status: 201 },
      );
    } catch (dbError) {
      console.error("‚ùå ERRO DB:", dbError);
      throw dbError; // Repassar para tratamento externo
    }
  } catch (error) {
    console.error("‚ùå‚ùå‚ùå Erro ao criar usu√°rio:", error);

    // Logs mais detalhados
    if (error instanceof Error) {
      console.error("Mensagem de erro:", error.message);
      console.error("Stack trace:", error.stack);
    }

    return NextResponse.json(
      {
        error: "Erro ao processar o cadastro",
        details: error instanceof Error ? error.message : "Erro desconhecido",
      },
      { status: 500 },
    );
  }
}
